snippet #!
	#!/usr/bin/env python

snippet imp
	import ${1:module}
# Module Docstring
snippet docs
	'''
	File: ${1:`Filename('$1.py', 'foo.py')`}
	Author: ${2:`g:snips_author`}
	Description: ${3}
	'''
snippet wh
	while ${1:condition}:
		${2:# code...}
snippet for
	for ${1:needle} in ${2:haystack}:
		${3:# code...}
# New Class
snippet cl
	class ${1:ClassName}(${2:object}):
		"""${3:docstring for $1}"""
		def __init__(self, ${4:arg}):
			${5:super($1, self).__init__()}
			self.$4 = $4
			${6}
# New Function
snippet def
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		"""${3:docstring for $1}"""
		${4:pass}
snippet deff
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		${3}
# New Method
snippet defs
	def ${1:mname}(self, ${2:arg}):
		${3:pass}
# New Property
snippet property
	def ${1:foo}():
		doc = "${2:The $1 property.}"
		def fget(self):
			${3:return self._$1}
		def fset(self, value):
			${4:self._$1 = value}
# Lambda
snippet ld
	${1:var} = lambda ${2:vars} : ${3:action}
snippet .
	self.
snippet try Try/Except
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
snippet try Try/Except/Else
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}
snippet try Try/Except/Finally
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	finally:
		${5:pass}
snippet try Try/Except/Else/Finally
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}
	finally:
		${6:pass}
# if __name__ == '__main__':
snippet ifmain
	if __name__ == '__main__':
		${1:main()}
# __magic__
snippet _
	__${1:init}__${2}
snippet ipdb
	import ipdb;ipdb.set_trace()

snippet twistedskeleton
	from bptxlib.reactor import reactor, defer

	def main():
		pass

	if __name__ == '__main__':
		reactor.callWhenRunning(main)
		reactor.run()

snippet trialskeleton
	from twisted.trial import unittest
	import mock

	class Test(unittest.TestCase):
		
		def setUp(self):
			pass

		def test_000(self):
			pass

snippet testskeleton
	import mock
	import unittest

	class Test(unittest.TestCase):

		def setUp(self):
			pass

		def test_000(self):
			pass

	if __name__ == '__main__':
		unittest.main()

snippet dtstart
	import time
	__t0 = time.time()

snippet dtstop
	print '${1:label} time elasped %.1fms' % ((1000*(time.time()-__t0)))

snippet cyanskeleton
	# -*- coding: utf-8 -*-
	###############################################################################
	# Copyright (C) 2006-2012 Cyan, Inc.                                          #
	# All rights reserved.                                                        #
	#   ____                     ___        _   _                                 #
	#  / ___|   _  __ _ _ __    / _ \ _ __ | |_(_) ___ ___                        #
	# | |  | | | |/ _` | '_ \  | | | | '_ \| __| |/ __/ __|                       #
	# | |__| |_| | (_| | | | | | |_| | |_) | |_| | (__\__ \                       #
	#  \____\__, |\__,_|_| |_|  \___/| .__/ \__|_|\___|___/                       #
	#       |___/                    |_|                                          #
	# PROPRIETARY NOTICE                                                          #
	# This Software consists of confidential information.                         #
	# Trade secret law and copyright law protect this Software.                   #
	# The above notice of copyright on this Software does not indicate            #
	# any actual or intended publication of such Software.                        #
	###############################################################################
