RED="\[\033[0;31m\]"
MAGENTA="\[\033[0;45m\]"
YELLOW="\[\033[1;33m\]"
GREEN="\[\033[0;32m\]"
BLUE="\[\033[1;34m\]"
CYAN="\[\033[1;46m\]"
LIGHT_RED="\[\033[1;31m\]"
LIGHT_GREEN="\[\033[1;32m\]"
WHITE="\[\033[1;37m\]"
LIGHT_GRAY="\[\033[0;37m\]"
COLOR_NONE="\[\e[0m\]"

function set_prompt_symbol () {
    if test $1 -eq 0 ; then
        PROMPT_SYMBOL="${LIGHT_GRAY}\$${COLOR_NONE}"
    else
        PROMPT_SYMBOL="${LIGHT_RED}\$${COLOR_NONE}"
    fi
}

function set_virtualenv () {
  if test -z "$VIRTUAL_ENV" ; then
      PYTHON_VIRTUALENV=""
  else
      PYTHON_VIRTUALENV="${COLOR_NONE}[${YELLOW}`basename \"$VIRTUAL_ENV\"`${COLOR_NONE}]" #${COLOR_NONE}"
  fi
}


# Copied from https://github.com/jimeh/git-aware-prompt
find_git_branch() {
  # Based on: http://stackoverflow.com/a/13003854/170413
  local branch
  if branch=$(git rev-parse --abbrev-ref HEAD 2> /dev/null); then
    if [[ "$branch" == "HEAD" ]]; then
      branch='detached*'
    fi
    git_branch="(${LIGHT_RED}$branch${COLOR_NONE})"
  else
    git_branch=""
  fi
}

find_git_dirty() {
  local status=$(git status --porcelain 2> /dev/null)
  if [[ "$status" != "" ]]; then
    git_dirty="[${BLUE}*${COLOR_NONE}]"
  else
    git_dirty=''
  fi
}

function set_git_prompt() {
    find_git_branch
    find_git_dirty
    GIT_PROMPT="${git_branch}${git_dirty}"
}

function set_bash_prompt () {
  # Set the PROMPT_SYMBOL variable. We do this first so we don't lose the
  # return value of the last command.
  set_prompt_symbol $?

  # Set the PYTHON_VIRTUALENV variable.
  set_virtualenv

  set_git_prompt

  # Set the bash prompt variable.
  PS1="${PYTHON_VIRTUALENV}${GIT_PROMPT}${COLOR_NONE}${LIGHT_GREEN}\u${COLOR_NONE}:${BLUE}\w${PROMPT_SYMBOL} "
}

# Tell bash to execute this function just before displaying its prompt.
PROMPT_COMMAND=set_bash_prompt


